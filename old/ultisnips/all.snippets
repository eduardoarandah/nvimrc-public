 # 4.1.3 Snippet Options:                           *UltiSnips-snippet-options*

# The 'options' control the behavior of the snippet. Options are indicated by
# single characters. The 'options' characters for a snippet are combined into
# a word without spaces.

# The options currently supported are: >
#   b   Beginning of line - A snippet with this option is expanded only if the
#       tab trigger is the first word on the line. In other words, if only
#       whitespace precedes the tab trigger, expand. The default is to expand
#       snippets at any position regardless of the preceding non-whitespace
#       characters.

#   i   In-word expansion - By default a snippet is expanded only if the tab
#       trigger is the first word on the line or is preceded by one or more
#       whitespace characters. A snippet with this option is expanded
#       regardless of the preceding character. In other words, the snippet can
#       be triggered in the middle of a word.

#   w   Word boundary - With this option, the snippet is expanded if
#       the tab trigger start matches a word boundary and the tab trigger end
#       matches a word boundary. In other words the tab trigger must be
#       preceded and followed by non-word characters. Word characters are
#       defined by the 'iskeyword' setting. Use this option, for example, to
#       permit expansion where the tab trigger follows punctuation without
#       expanding suffixes of larger words. This option overrides 'i'.

#   r   Regular expression - With this option, the tab trigger is expected to
#       be a python regular expression. The snippet is expanded if the recently
#       typed characters match the regular expression. Note: The regular
#       expression MUST be quoted (or surrounded with another character) like a
#       multi-word tab trigger (see above) whether it has spaces or not. A
#       resulting match is passed to any python code blocks in the snippet
#       definition as the local variable "match". Regular expression snippets
#       can be triggered in-word by default. To avoid this you can start your
#       regex pattern with '\b', although this will not respect your
#       'iskeyword' setting.

#   t   Do not expand tabs - If a snippet definition includes leading tab
#       characters, by default UltiSnips expands the tab characters honoring
#       the Vim 'shiftwidth', 'softtabstop', 'expandtab' and 'tabstop'
#       indentation settings. (For example, if 'expandtab' is set, the tab is
#       replaced with spaces.) If this option is set, UltiSnips will ignore the
#       Vim settings and insert the tab characters as is. This option is useful
#       for snippets involved with tab delimited formats.

#   s   Remove whitespace immediately before the cursor at the end of a line
#       before jumping to the next tabstop.  This is useful if there is a
#       tabstop with optional text at the end of a line.

#   m   Trim all whitespaces from right side of snippet lines. Useful when
#       snippet contains empty lines which should remain empty after expanding.
#       Without this option empty lines in snippets definition will have
#       indentation too.

#   e   Custom context snippet - With this option expansion of snippet can be
#       controlled not only by previous characters in line, but by any given
#       python expression. This option can be specified along with other
#       options, like 'b'. See |UltiSnips-custom-context-snippets| for more info.

#   A   Snippet will be triggered automatically, when condition matches.
#       See |UltiSnips-autotrigger| for more info.

# This file contains snippets that are always defined. I personally
# have snippets for signatures and often needed texts

# sligthly lower priority than everything else since specialized versions
# should overwrite. The user needs to adjust her priority in her snippets to
# ~-55 so that other filetypes will still overwrite.
priority -60


snippet interpolationexample "Interpolation example"
${1}

Title Case:
`!p snip.rv = t[1].title() if t[1] else ''`

dash-case:
`!p snip.rv = t[1].replace(" ","-") if t[1] else ''`

underscore_case:
`!p snip.rv = t[1].replace(" ","_") if t[1] else ''`

camelCase:
`!p snip.rv = t[1][0].lower() + t[1].title().replace(" ","")[1:] if t[1] else ''`
endsnippet

##############
# NICE BOXES #
##############
# global !p
# from vimsnippets import foldmarker, make_box, get_comment_format
# endglobal

# snippet box "A nice box with the current comment symbol" b
# `!p
# box = make_box(len(t[1]))
# snip.rv = box[0]
# snip += box[1]
# `${1:${VISUAL:content}}`!p
# box = make_box(len(t[1]))
# snip.rv = box[2]
# snip += box[3]`
# $0
# endsnippet

# snippet bbox "A nice box over the full width" b
# `!p
# if not snip.c:
# 	width = int(vim.eval("&textwidth - (virtcol('.') == 1 ? 0 : virtcol('.'))")) or 71
# box = make_box(len(t[1]), width)
# snip.rv = box[0]
# snip += box[1]
# `${1:${VISUAL:content}}`!p
# box = make_box(len(t[1]), width)
# snip.rv = box[2]
# snip += box[3]`
# $0
# endsnippet

# snippet fold "Insert a vim fold marker" b
# `!p snip.rv = get_comment_format()[0]` ${1:Fold description} `!p snip.rv = foldmarker()[0]`${2:1} `!p snip.rv = get_comment_format()[2]`
# endsnippet

# snippet foldc "Insert a vim fold close marker" b
# `!p snip.rv = get_comment_format()[0]` ${2:1}`!p snip.rv = foldmarker()[1]` `!p snip.rv = get_comment_format()[2]`
# endsnippet

# snippet foldp "Insert a vim fold marker pair" b
# `!p snip.rv = get_comment_format()[0]` ${1:Fold description} `!p snip.rv = foldmarker()[0]` `!p snip.rv = get_comment_format()[2]`
# ${2:${VISUAL:Content}}
# `!p snip.rv = get_comment_format()[0]` `!p snip.rv = foldmarker()[1]` $1 `!p snip.rv = get_comment_format()[2]`
# endsnippet

##########################
# LOREM IPSUM GENERATORS #
##########################

snippet lorem "Lorem Ipsum - 50 Words" b
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.
endsnippet

##########################
# VIM MODELINE GENERATOR #
##########################
# See advice on `:help 'tabstop'` for why these values are set. Uses second
# modeline form ('set') to work in languages with comment terminators
# (/* like C */).
# snippet modeline "Vim modeline"
# vim`!v ':set '. (&expandtab ? printf('et sw=%i ts=%i', &sw, &ts) : printf('noet sts=%i sw=%i ts=%i', &sts, &sw, &ts)) . (&tw ? ' tw='. &tw : '') . ':'`
# endsnippet

#########
# DATES #
#########
snippet date "YYYY-MM-DD" w
`!v strftime("%Y-%m-%d")`
endsnippet

snippet ddate "Month DD, YYYY" w
`!v strftime("%b %d, %Y")`
endsnippet

snippet diso "ISO format datetime" w
`!v strftime("%Y-%m-%d %H:%M:%S%z")`
endsnippet

snippet time "hh:mm" w
`!v strftime("%H:%M")`
endsnippet

snippet datetime "YYYY-MM-DD hh:mm" w
`!v strftime("%Y-%m-%d %H:%M")`
endsnippet

# snippet todo "TODO comment" bw
# `!p snip.rv=get_comment_format()[0]` ${2:TODO}: $0${3: <${4:`!v strftime('%d-%m-%y')`}${5:, `!v g:snips_author`}>} `!p snip.rv=get_comment_format()[2]`
# endsnippet

##########
#  Misc  #
##########
snippet uuid "Random UUID" w
`!p if not snip.c: import uuid; snip.rv = uuid.uuid4()`
endsnippet

# vim:ft=snippets:
