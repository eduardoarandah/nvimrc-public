#  b   Beginning of line - A snippet with this option is expanded only if the
#      tab trigger is the first word on the line. In other words, if only
#      whitespace precedes the tab trigger, expand. The default is to expand
#      snippets at any position regardless of the preceding non-whitespace
#      characters.
#
#  i   In-word expansion - By default a snippet is expanded only if the tab
#      trigger is the first word on the line or is preceded by one or more
#      whitespace characters. A snippet with this option is expanded
#      regardless of the preceding character. In other words, the snippet can
#      be triggered in the middle of a word.
#
#  w   Word boundary - With this option, the snippet is expanded if
#      the tab trigger start matches a word boundary and the tab trigger end
#      matches a word boundary. In other words the tab trigger must be
#      preceded and followed by non-word characters. Word characters are
#      defined by the 'iskeyword' setting. Use this option, for example, to
#      permit expansion where the tab trigger follows punctuation without
#      expanding suffixes of larger words.
#
#  r   Regular expression - With this option, the tab trigger is expected to
#      be a python regular expression. The snippet is expanded if the recently
#      typed characters match the regular expression. Note: The regular
#      expression MUST be quoted (or surrounded with another character) like a
#      multi-word tab trigger (see above) whether it has spaces or not. A
#      resulting match is passed to any python code blocks in the snippet
#      definition as the local variable "match".
#
#  t   Do not expand tabs - If a snippet definition includes leading tab
#      characters, by default UltiSnips expands the tab characters honoring
#      the Vim 'shiftwidth', 'softtabstop', 'expandtab' and 'tabstop'
#      indentation settings. (For example, if 'expandtab' is set, the tab is
#      replaced with spaces.) If this option is set, UltiSnips will ignore the
#      Vim settings and insert the tab characters as is. This option is useful
#      for snippets involved with tab delimited formats.
#
#  s   Remove whitespace immediately before the cursor at the end of a line
#      before jumping to the next tabstop.  This is useful if there is a
#      tabstop with optional text at the end of a line.
#
#  m   Trim all whitespaces from right side of snippet lines. Useful when
#      snippet contains empty lines which should remain empty after expanding.
#      Without this option empty lines in snippets definition will have
#      indentation too.
#
#  e   Custom context snippet - With this option expansion of snippet can be
#      controlled not only by previous characters in line, but by any given
#      python expression. This option can be specified along with other
#      options, like 'b'. See |UltiSnips-custom-context-snippets| for more info.
#
#  A   Snippet will be triggered automatically, when condition matches.
#      See |UltiSnips-autotrigger| for more info.

extends css

#########
#  css  #
#########

snippet mw "Max width"
max-width: $1;
endsnippet

snippet mh "min-height"
min-height: $1;
endsnippet

snippet a "a{}"
a{
	$1
}
endsnippet

snippet breakpoint "breakpoint (no mixin)"
@media (min-width: map-get($grid-breakpoints, $1 )) {
	$0
}
endsnippet

snippet sm "breakpoint sm"
@include media-breakpoint-up(sm) {
	${1}
}
endsnippet

snippet md "breakpoint md"
@include media-breakpoint-up(md) {
	${1}
}
endsnippet

snippet lg "breakpoint lg"
@include media-breakpoint-up(lg) {
	${1}
}
endsnippet

snippet xl "breakpoint xl"
@include media-breakpoint-up(xl) {
	${1}
}
endsnippet

snippet xxl "breakpoint xxl"
@include media-breakpoint-up(xxl) {
	${1}
}
endsnippet

snippet css "Basic CSS"
font-size: $9;
line-height: ($2/$1);
${3:font-weight: ${4:400};}
${5:letter-spacing:.$6em;}
${7:margin-bottom: $8rem;}
@include media-breakpoint-up(lg) {
	font-size: rem($1px);${0}
}
endsnippet

snippet fr "Font Rem"
font-size: rem($1px);
endsnippet

snippet rem "rem() helper" i
rem($0px)
endsnippet

###########
#  sage9  #
###########
snippet tc "Theme Color" i
theme-color("${1:primary}")
endsnippet

###############
#  Gutenberg  #
###############

snippet gut "Gutenberg Block"
.$1 {
	* {
		outline: 1px dashed gray;
	}
	&__header {}
	&__text {}
	&__link {}
	&__image {}
}
endsnippet

#########
#  BEM  #
#########

snippet bem "BEM definition"
&__$1{
$0
}
endsnippet

#########
#  css  #
#########
snippet flex "Flex"
display: flex;
flex-direction: column;
justify-content: center;
align-items:center;
endsnippet

snippet contain "Contain"
max-width:$1;
margin-left: auto;
margin-right:auto;
endsnippet

snippet mlr "Margin left, right"
margin-left: ${1:auto};
margin-right: ${2:auto};
endsnippet

snippet grid "Grid basic"
@supports (display: grid) {
	display: grid;
	grid-gap: 1rem;
	@include media-breakpoint-up(lg) {
		grid-template-columns: repeat(auto-fit,minmax(300px,1fr));
	} 
}
endsnippet

snippet overlay "CSS Overlay"
position: relative;
&__overlay {
	position: absolute;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
	background-color: theme-color('secondary');
	opacity: 0.7;
}
endsnippet

snippet pseudo "Pseudo Element"
position: relative;
// &:not(:last-child):after {
&::${1:after} {
		display: block;
		content: '';
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		width: $3;
		height: $4;
		background-color: $2;
}
endsnippet


snippet mwc "Max width and center" i
max-width: $0;
margin-left: auto;
margin-right: auto;
endsnippet

snippet svg "SVG Icon"
display: inline-block;
background-image: url(../images/$1.svg);
background-size: contain;
width: $2px;
height: $3px;
endsnippet

snippet tt "Text transform"
text-transform: ${1:uppercase};
endsnippet


snippet o "Outline"
outline: 1px dashed ${1:red};
endsnippet

snippet outlineall "Outline all elements"
*{
	outline: 1px dashed gray;
}
endsnippet

snippet list-image "List item with image"
li {
	list-style: none;
	margin-bottom: 0.5rem;
	display: flex;
	align-items: center;
	&:before {
		content: '';
		display: inline-block;
		background-image: url(../images/check.png);
		background-size: cover;
		margin-right: 3px;
		width: 15px;
		height: 14px;
		@include media-breakpoint-up(lg) {
			width: 21px;
			height: 20px;
		}
	}
}
endsnippet

snippet not ":not statement"
&:not(${1::first-child}){
	$0
}
endsnippet

snippet notfirstchild ":not first child"
> *:not(:first-child) {
		margin-left: 10px;
}
endsnippet

snippet bgi "Background image"
background-image: url(../images/$1);
background-size: cover;
background-repeat: no-repeat;
endsnippet

snippet ! "!important" i
!important
endsnippet

snippet dummy "dummy classes"
.dummy, .dummy * { outline: 1px dashed red; }
endsnippet
